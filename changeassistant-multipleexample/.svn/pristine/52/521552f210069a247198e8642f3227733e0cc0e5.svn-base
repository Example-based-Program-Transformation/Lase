package changeassistant.multipleexample.main;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

import changeassistant.main.ProjectMethodPair;

public class XMLReaderWithOracle {

	public static List<ProjectMethodPair> readXML(String xmlPath,
			List<Oracle> oracles, List<List<String>> candidateProjects) {
		List<ProjectMethodPair> pmps = new ArrayList<ProjectMethodPair>();
		String src, leftProjectName, rightProjectName, leftClassName1, leftClassName2, rightClassName1, rightClassName2, leftFilePath1, leftFilePath2, rightFilePath1, rightFilePath2, leftMethodName1, leftMethodName2, rightMethodName1, rightMethodName2;
		String extractedMethod;
		Oracle oracle = null;
		File file = new File(xmlPath);
		SAXBuilder builder = new SAXBuilder();
		try {
			Document doc = builder.build(file);
			Element listElem = doc.getRootElement();
			List<Element> projectPairs = listElem.getChildren();
			String comparison = null;
			ProjectMethodPair pmp;
			for (Element projectPair : projectPairs) {
				src = projectPair.getChildText("src").trim();
				leftProjectName = projectPair.getChildText("leftProjectName")
						.trim();
				rightProjectName = projectPair.getChildText("rightProjectName")
						.trim();
				leftClassName1 = projectPair.getChildText("leftClassName1")
						.trim();
				leftClassName2 = projectPair.getChildText("leftClassName2")
						.trim();
				rightClassName1 = projectPair.getChildText("rightClassName1")
						.trim();
				rightClassName2 = projectPair.getChildText("rightClassName2")
						.trim();
				leftFilePath1 = projectPair.getChildText("leftFilePath1")
						.trim();
				leftFilePath2 = projectPair.getChildText("leftFilePath2")
						.trim();
				rightFilePath1 = projectPair.getChildText("rightFilePath1")
						.trim();
				rightFilePath2 = projectPair.getChildText("rightFilePath2")
						.trim();
				leftMethodName1 = projectPair.getChildText("leftMethodName1")
						.trim();
				leftMethodName2 = projectPair.getChildText("leftMethodName2")
						.trim();
				rightMethodName1 = projectPair.getChildText("rightMethodName1")
						.trim();
				rightMethodName2 = projectPair.getChildText("rightMethodName2")
						.trim();
				pmp = new ProjectMethodPair(src, leftProjectName,
						rightProjectName, leftClassName1, leftClassName2,
						rightClassName1, rightClassName2, leftFilePath1,
						leftFilePath2, rightFilePath1, rightFilePath2,
						leftMethodName1, leftMethodName2, rightMethodName1,
						rightMethodName2);
				pmp = new ProjectMethodPair(src, leftProjectName,
						rightProjectName, rightClassName1, rightClassName2,
						leftClassName1, leftClassName2, rightFilePath1,
						rightFilePath2, leftFilePath1, leftFilePath2,
						rightMethodName1, rightMethodName2, leftMethodName1,
						leftMethodName2);
				pmps.add(pmp);
				oracle = new Oracle();
				oracles.add(oracle);
				comparison = projectPair.getChildTextTrim("costs");
				if (comparison != null) {
					oracle.put(Constants.COMPARISON, comparison);
				}
				extractedMethod = projectPair.getChildTextTrim("extractMethod");
				if (extractedMethod != null) {
					oracle.put(Constants.EXTRACT_METHOD, extractedMethod);
				}
				Element tmpElem = projectPair.getChild("modifiedMethods");
				if (tmpElem != null) {
					List<Element> children = tmpElem.getChildren();
					for (int i = 0; i < children.size(); i++) {
						oracle.put(Integer.valueOf(i), children.get(i)
								.getTextTrim());
					}
				}
			}
		} catch (JDOMException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return pmps;
	}
}
